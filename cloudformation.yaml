AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html
# Tests:
#     Lint: https://github.com/aws-cloudformation/cfn-python-lint
#     Nag: https://github.com/stelligent/cfn_nag
#     aws cloudformation validate-template: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/validate-template.html

Description: >-
  Senzing aws-cloudformation-database-cluster: 1.1.1
  For more information see https://github.com/Senzing/aws-cloudformation-database-cluster

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Security responsibility
        Parameters:
          - SecurityResponsibility
      -
        Label:
          default: Senzing installation
        Parameters:
          - AcceptEula
          - SenzingLicenseAsBase64
      -
        Label:
          default: Security
        Parameters:
          - CognitoAdminEmail
    ParameterLabels:
      AcceptEula:
        default: >-
          Required: If you accept the Senzing End User License Agreement at
          https://senzing.com/end-user-license-agreement,
          enter 'I_ACCEPT_THE_SENZING_EULA'.
      CognitoAdminEmail:
        default: 'Required: Email address for initial user.'
      SecurityResponsibility:
        default: >-
          Required: A default deployment of this template is for public demonstration only.
          Before using authentic PII, ensure the security of your deployment.
          The security of this deployment is your responsibility.
          To acknowledge your understanding and acceptance of the foregoing, type “I AGREE”.
      SenzingLicenseAsBase64:
        default: >-
          Required if inserting more than 100K records.
          Senzing license as base64 encoded string.

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

# AWS Console: https://console.aws.amazon.com/cloudformation/home?#/stacks > {stack} > Parameters

  AcceptEula:
    AllowedPattern: '.+|^I_ACCEPT_THE_SENZING_EULA$'
    ConstraintDescription: AcceptEula parameter must be 'I_ACCEPT_THE_SENZING_EULA'
    Default: '_'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#accepteula'
    Type: String


  CognitoAdminEmail:
    AllowedPattern: '.+|^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$'
    ConstraintDescription: Entering initial user email address is required to proceed
    Default: '_'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#cognitoadminemail'
    Type: String


  SecurityResponsibility:
    AllowedPattern: '.+|^I AGREE$'
    ConstraintDescription: SecurityResponsibility parameter must be 'I AGREE'
    Default: '_'
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#securityresponsibility'
    Type: String


  SenzingLicenseAsBase64:
#   AllowedPattern: ' ^$|[^-A-Za-z0-9+\/=\s]|=[^=]|={3,}$'
    ConstraintDescription: 'Must contain only Base64 characters. see https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#senzinglicenseasbase64'
    Default: ' '
    Description: 'Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#senzinglicenseasbase64'
    Type: String

# -----------------------------------------------------------------------------
# Rules
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/rules-section-structure.html
# -----------------------------------------------------------------------------

Rules:

  ConfirmCognitoAdminEmail:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref CognitoAdminEmail
            - '_'
        AssertDescription: 'Entering initial user email address is required to proceed'


  ConfirmEula:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref AcceptEula
            - ''
        AssertDescription: 'EULA needs to be accepted.  Enter "I_ACCEPT_THE_SENZING_EULA"'
      - Assert: !Equals
          - !Ref AcceptEula
          - I_ACCEPT_THE_SENZING_EULA
        AssertDescription: 'EULA acceptance incorrect.  Enter "I_ACCEPT_THE_SENZING_EULA"'


  ConfirmSecurityResponsibility:
    Assertions:
      - Assert: !Equals
          - !Ref SecurityResponsibility
          - 'I AGREE'
        AssertDescription: 'Understanding responsibility and entering "I AGREE" is required to proceed.'

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  Constants:
    Database:
      Name: G2
      Username: senzing
    Run:
      VpcFlowLogs: No
    Senzing:
      Version: senzingapi-2.7.0-21153
    Stack:
      Name: database-cluster


  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    privsubnet1:
      cidr: 10.0.1.0/24
    privsubnet2:
      cidr: 10.0.2.0/24
    pubsubnet1:
      cidr: 10.0.3.0/24
    pubsubnet2:
      cidr: 10.0.4.0/24

# -----------------------------------------------------------------------------
# Conditions
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
# -----------------------------------------------------------------------------

Conditions:

  IfRunVpcFlowLogs: !Equals
    - !FindInMap [Constants, Run, VpcFlowLogs]
    - Yes

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# -- Ssm -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
# AWS Console: https://console.aws.amazon.com/systems-manager/parameters > Search for {stack}

  SsmParameterSenzingEngineConfigurationJson:
    Properties:
      Name: !Sub "${AWS::StackName}-ssm-parameter-senzing-engine-configuration-json"
      Type: String
      Value: !Sub
        - >-
          {
              "PIPELINE": {
                  "CONFIGPATH": "/etc/opt/senzing",
                  "RESOURCEPATH": "/opt/senzing/g2/resources",
                  "SUPPORTPATH": "/opt/senzing/data"
              },
              "SQL": {
                  "BACKEND": "HYBRID",
                  "CONNECTION":"postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseHostCore}:${DatabasePortCore}:${DatabaseName}"
              },
              "C1": {
                  "CLUSTER_SIZE": "1",
                  "DB_1": "postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseHostRes}:${DatabasePortRes}:${DatabaseName}"
              },
              "C2": {
                  "CLUSTER_SIZE": "1",
                  "DB_1": "postgresql://${DatabaseUsername}:${DatabasePassword}@${DatabaseHostLibfeat}:${DatabasePortLibfeat}:${DatabaseName}"
              },
              "HYBRID": {
                  "LIB_FEAT": "C2",
                  "LIB_FEAT_HKEY": "C2",
                  "RES_FEAT": "C1",
                  "RES_FEAT_EKEY": "C1",
                  "RES_FEAT_LKEY": "C1",
                  "RES_FEAT_STAT": "C1"
              }
          }
        - DatabaseHostLibfeat: !GetAtt RdsDbClusterLibfeat.Endpoint.Address
          DatabaseHostCore: !GetAtt RdsDbClusterCore.Endpoint.Address
          DatabaseHostRes: !GetAtt RdsDbClusterRes.Endpoint.Address
          DatabaseName: !FindInMap [Constants, Database, Name]
          DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
          DatabasePortLibfeat: !GetAtt RdsDbClusterLibfeat.Endpoint.Port
          DatabasePortCore: !GetAtt RdsDbClusterCore.Endpoint.Port
          DatabasePortRes: !GetAtt RdsDbClusterRes.Endpoint.Port
          DatabaseUsername: !FindInMap [Constants, Database, Username]
    Type: AWS::SSM::Parameter

# -- Iam -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
# AWS Console: https://console.aws.amazon.com/iam/home?#/roles > Search for {stack}

  IamRoleDebug:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-debug"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-debug"
    Type: AWS::IAM::Role


  IamRoleFlowLog:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-flow-log"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-flow-log"
    Type: AWS::IAM::Role


  IamRoleG2ConfigTool:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-g2configtool"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-g2configtool"
    Type: AWS::IAM::Role


  IamRoleInitEfs:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-init-efs"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-efs"
    Type: AWS::IAM::Role


  IamRoleInitPostgres:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-init-postgres"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-postgres"
    Type: AWS::IAM::Role


  IamRoleInitSenzing:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-init-senzing"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-init-senzing"
    Type: AWS::IAM::Role


  IamRoleInstallSenzing:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-install-senzing"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-install-senzing"
    Type: AWS::IAM::Role


  IamRoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
                - route53.amazonaws.com
                - sqs.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-lambda"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-lambda"
    Type: AWS::IAM::Role


# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
# AWS Console: https://console.aws.amazon.com/iam/home?#/roles > Search for {stack} > {role} > inline policy

  IamPolicyCertificateManager:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-certificate-manager"
      PolicyDocument:
        Statement:
          -
            Action:
              - acm:ListCertificates
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyCertificates:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-certificates"
      PolicyDocument:
        Statement:
          -
            Action:
              - iam:UploadServerCertificate
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyCognito:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-cognito"
      PolicyDocument:
        Statement:
          -
            Action:
              - cognito-idp:AdminCreateUser
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyEc2FlowLogs:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-group"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleFlowLog
    Type: AWS::IAM::Policy


  IamPolicyEfs:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-lambda"
      PolicyDocument:
        Statement:
          -
            Action:
              - elasticfilesystem:DescribeMountTargets
              - elasticfilesystem:DescribeFileSystems
            Effect: Allow
            Resource:
              - !GetAtt EfsFileSystem.Arn
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleFlowLog
       - !Ref IamRoleG2ConfigTool
       - !Ref IamRoleInitEfs
       - !Ref IamRoleInitPostgres
       - !Ref IamRoleInitSenzing
       - !Ref IamRoleInstallSenzing
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyPassRole:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-pass-role"
      PolicyDocument:
        Statement:
          -
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleFlowLog
       - !Ref IamRoleG2ConfigTool
       - !Ref IamRoleInitEfs
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyRds:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-rds"
      PolicyDocument:
        Statement:
          -
            Action:
              - rds:ModifyDBCluster
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyRoute53:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-route53"
      PolicyDocument:
        Statement:
          -
            Action:
              - route53:GetHostedZone
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyS3:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-s3"
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy


  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          -
            Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleG2ConfigTool
       - !Ref IamRoleLambda
    Type: AWS::IAM::Policy

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
# AWS Console: https://console.aws.amazon.com/cloudwatch/home?#logsV2:log-groups > Search for {stack}

  LogsLogGroupDbClusterCore:
    Properties:
      LogGroupName: !Sub
        - "/aws/rds/cluster/${StackNameAsLower}-aurora-senzing-core-cluster/postgresql"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
    Type: AWS::Logs::LogGroup


  LogsLogGroupDbClusterLibfeat:
    Properties:
      LogGroupName: !Sub
        - "/aws/rds/cluster/${StackNameAsLower}-aurora-senzing-libfeat-cluster/postgresql"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
    Type: AWS::Logs::LogGroup


  LogsLogGroupDbClusterRes:
    Properties:
      LogGroupName: !Sub
        - "/aws/rds/cluster/${StackNameAsLower}-aurora-senzing-res-cluster/postgresql"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRandomPassword:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-random-password"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRandomString:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-random-string"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRunTask:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-run-task"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaRunTaskAndWait:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-run-task-and-wait"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaSetRdbTimeoutAction:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-set-rdb-timeout-action"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaStringToLower:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-string-to-lower"
    Type: AWS::Logs::LogGroup


  LogsLogGroupLambdaWaitForEfs:
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-wait-for-efs"
    Type: AWS::Logs::LogGroup


  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-flowlog.html
# https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-cwl.html

  Ec2FlowLog:
    Condition: IfRunVpcFlowLogs
    Properties:
      DeliverLogsPermissionArn: !GetAtt IamRoleFlowLog.Arn
      LogGroupName: !Ref LogsLogGroupMain
      ResourceId: !Ref Ec2Vpc
      ResourceType: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-flow-log"
      TrafficType: ALL
    Type: AWS::EC2::FlowLog

# -- Cloud, subnets, routing --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#vpcs > Search for {stack}

  Ec2Vpc:
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-vpc"
    Type: AWS::EC2::VPC

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#subnets > Search for {stack}

  Ec2SubnetPrivate1:
    Properties:
      AvailabilityZone: !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - privsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-private-1"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet


  Ec2SubnetPrivate2:
    Properties:
      AvailabilityZone: !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - privsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-private-2"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic1:
    Properties:
      AvailabilityZone: !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-1"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic2:
    Properties:
      AvailabilityZone: !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-public-2"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#Addresses: > Search for {stack}

  Ec2Eip:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-eip"
    Type: AWS::EC2::EIP

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#NatGateways: > Search for {stack}

  Ec2NatGateway:
    Properties:
      AllocationId: !GetAtt Ec2Eip.AllocationId
      SubnetId: !Ref Ec2SubnetPublic1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-nat-gateway"
    Type: AWS::EC2::NatGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#SecurityGroups > Search for {stack}

  Ec2SecurityGroupInternal:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - ECS internal open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      SecurityGroupIngress:
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: HTTPS
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: NFS
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: PostgreSQL
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
        -
          CidrIp: !FindInMap
            - VpcCidrs
            - vpc
            - cidr
          Description: phpPgAdmin
          FromPort: 9171
          IpProtocol: tcp
          ToPort: 9171
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-internal"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::SecurityGroup


  Ec2SecurityGroupLambdaRunner:
    Properties:
      GroupDescription: !Sub "${AWS::StackName} - Lambda open ports."
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          Description: All
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group-lambda-runner"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::SecurityGroup



# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#igws > Search for {stack}

  Ec2InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Type: AWS::EC2::InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#igws > Search for {stack} > State & VPI ID

  Ec2VpcGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref Ec2InternetGateway
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::VPCGatewayAttachment

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > Search for {stack}

  Ec2RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-private"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable


  Ec2RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table-public"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > {name} > "Routes" tab

  Ec2RoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Ec2NatGateway
      RouteTableId: !Ref Ec2RouteTablePrivate
    Type: AWS::EC2::Route


  Ec2RoutePublic:
    DependsOn:
     - Ec2VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Ec2InternetGateway
      RouteTableId: !Ref Ec2RouteTablePublic
    Type: AWS::EC2::Route

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
# AWS Console: https://console.aws.amazon.com/vpc/home?#RouteTables > {name} > "Subnet Associations" tab

  Ec2SubnetRouteTableAssociationPrivate1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId: !Ref Ec2SubnetPrivate1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPrivate2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePrivate
      SubnetId: !Ref Ec2SubnetPrivate2
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPublic1:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociationPublic2:
    Properties:
      RouteTableId: !Ref Ec2RouteTablePublic
      SubnetId: !Ref Ec2SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

# -- Elastic File System ------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html
# AWS Console: https://console.aws.amazon.com/efs/home?#/filesystems > Search for {stack}

  EfsFileSystem:
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efs-filesystem"
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    Type: AWS::EFS::FileSystem

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html
# AWS Console: https://console.aws.amazon.com/efs/home?#/filesystems > {name} > "Network" tab

  EfsMountTarget1:
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
        - Ref: Ec2SecurityGroupInternal
      SubnetId:
        Ref: Ec2SubnetPrivate1
    Type: AWS::EFS::MountTarget


  EfsMountTarget2:
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
        - Ref: Ec2SecurityGroupInternal
      SubnetId:
        Ref: Ec2SubnetPrivate2
    Type: AWS::EFS::MountTarget

# -- Database -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
# AWS Console: https://console.aws.amazon.com/rds/home#db-subnet-groups-list: > Search for {stack}

  RdsDbSubnetGroup:
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-db-subnet-description"
      DBSubnetGroupName: !Sub "${AWS::StackName}-db-subnet"
      SubnetIds:
        - !Ref Ec2SubnetPrivate1
        - !Ref Ec2SubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-subnet-group"
    Type: AWS::RDS::DBSubnetGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbclusterparametergroup.html
# AWS Console: https://console.aws.amazon.com/rds/home?#parameter-groups: > Search for {stack}

  RdsDbClusterParameterGroup:
    Properties:
      Description: !Sub "${AWS::StackName}-rds-db-cluster-parameter-group-description"
      Family: aurora-postgresql10
      Parameters:
        'synchronous_commit': 'off'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster-parameter-group"
    Type: AWS::RDS::DBClusterParameterGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
# AWS Console: https://console.aws.amazon.com/rds/home?#databases: > Search for {stack}

  RdsDbClusterCore:
    DependsOn:
     - LogsLogGroupDbClusterCore
     - RdsDbSubnetGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPrivate1.AvailabilityZone
        - !GetAtt Ec2SubnetPrivate2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-senzing-core-cluster"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      # FIXME: Tricky code.  See https://console.aws.amazon.com/support/home#/case/?displayId=7725760511
      DBSubnetGroupName: !Sub
        - "${StackNameAsLower}-db-subnet"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      DeletionProtection: false
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.12'
      MasterUsername: !FindInMap [Constants, Database, Username]
      MasterUserPassword: !GetAtt LambdaRunnerDbPassword.RandomString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       FIXME:  Uncomment once 'TimeoutAction' is supported.
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       https://console.aws.amazon.com/support/home#/case/?displayId=7705681311&language=en
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-core-cluster"
      VpcSecurityGroupIds:
        - !Ref Ec2SecurityGroupInternal
    Type: AWS::RDS::DBCluster


  RdsDbClusterLibfeat:
    DependsOn:
     - LogsLogGroupDbClusterLibfeat
     - RdsDbSubnetGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPrivate1.AvailabilityZone
        - !GetAtt Ec2SubnetPrivate2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-senzing-libfeat-cluster"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      # FIXME: Tricky code.  See https://console.aws.amazon.com/support/home#/case/?displayId=7725760511
      DBSubnetGroupName: !Sub
        - "${StackNameAsLower}-db-subnet"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      DeletionProtection: false
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.12'
      MasterUsername: !FindInMap [Constants, Database, Username]
      MasterUserPassword: !GetAtt LambdaRunnerDbPassword.RandomString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       FIXME:  Uncomment once 'TimeoutAction' is supported.
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       https://console.aws.amazon.com/support/home#/case/?displayId=7705681311&language=en
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-libfeat-cluster"
      VpcSecurityGroupIds:
        - !Ref Ec2SecurityGroupInternal
    Type: AWS::RDS::DBCluster


  RdsDbClusterRes:
    DependsOn:
     - LogsLogGroupDbClusterRes
     - RdsDbSubnetGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPrivate1.AvailabilityZone
        - !GetAtt Ec2SubnetPrivate2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-senzing-res-cluster"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      # FIXME: Tricky code.  See https://console.aws.amazon.com/support/home#/case/?displayId=7725760511
      DBSubnetGroupName: !Sub
        - "${StackNameAsLower}-db-subnet"
        - StackNameAsLower: !GetAtt LambdaRunnerStackNameAsLower.OutputString
      DeletionProtection: false
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: '10.12'
      MasterUsername: !FindInMap [Constants, Database, Username]
      MasterUserPassword: !GetAtt LambdaRunnerDbPassword.RandomString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       FIXME:  Uncomment once 'TimeoutAction' is supported.
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       https://console.aws.amazon.com/support/home#/case/?displayId=7705681311&language=en
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-res-cluster"
      VpcSecurityGroupIds:
        - !Ref Ec2SecurityGroupInternal
    Type: AWS::RDS::DBCluster


# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/clusters > Search for {stack}

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

# -- LambdaFunction -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
# AWS Console: https://console.aws.amazon.com/lambda/home?#/functions > Search for {stack}


  LambdaFunctionRandomString:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import random
          import string
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      length = int(properties.get('Length', 0))
                      response_data["RandomString"] = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Generate string of random characters.
      FunctionName: !Sub "${AWS::StackName}-lambda-random-string"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-random-string"
      Timeout: 600
    Type: AWS::Lambda::Function


  LambdaFunctionRunTask:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task.
      FunctionName: !Sub "${AWS::StackName}-lambda-run-task"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-task"
      Timeout: 30
    Type: AWS::Lambda::Function


  LambdaFunctionRunTaskAndWait:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                      # Wait for completion.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#waiters

                      waiter = ecs.get_waiter('tasks_stopped')
                      waiter.wait(
                          cluster=properties['ClusterId'],
                          tasks=[response['tasks'][0]['taskArn']],
                      )

                      response['describe_task'] = ecs.describe_tasks(
                          cluster=properties['ClusterId'],
                          tasks=[response['tasks'][0]['taskArn']],
                      )
                      logger.info("describe_task response: {0}".format(json.dumps(response['describe_task'], cls=DateTimeEncoder)))

                      exit_code = response.get('describe_task', {}).get('tasks', [{}])[0].get('containers', [{}])[0].get('exitCode', 99)
                      if exit_code != 0:
                          result = cfnresponse.FAILED
                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task and waits until completion.
      FunctionName: !Sub "${AWS::StackName}-lambda-run-task-and-wait"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-task-and-wait"
      Timeout: 600
    Type: AWS::Lambda::Function


  LambdaFunctionSetRdbTimeoutAction:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3
          import boto3
          import cfnresponse
          import json
          import logging
          import traceback
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      region = properties.get('Region')
                      cluster_id = properties.get('DBClusterIdentifier')
                      if cluster_id and region:
                          client = boto3.client('rds', region_name=region)
                          response_data = client.modify_db_cluster(
                              DBClusterIdentifier = cluster_id,
                              ScalingConfiguration = {
                                  'TimeoutAction': 'ForceApplyCapacityChange'
                              },
                          )
                      else:
                          logger.error("Properties not provided in ResourceProperties")
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})
                  logger.info(response_data)

      Description: Sets the RDB TimeoutAction to ForceApplyCapacityChange.
      FunctionName: !Sub "${AWS::StackName}-lambda-set-rdb-timeout-action"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-set-rdb-timeout-action"
      Timeout: 30
    Type: AWS::Lambda::Function


  LambdaFunctionStringToLower:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response_data = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      input_string = properties.get('InputString', '')
                      response_data["OutputString"] = input_string.lower()
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, response_data)

      Description: Performs string.lower()
      FunctionName: !Sub "${AWS::StackName}-lambda-string-to-lower"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-string-to-lower"
    Type: AWS::Lambda::Function


  LambdaFunctionWaitForEfs:
    DependsOn:
     - Ec2SubnetRouteTableAssociationPrivate1
     - Ec2SubnetRouteTableAssociationPrivate2
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import json
          import logging
          import time
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      describe_parameters = properties.get('DescribeParameters', {})
                      efs = boto3.client('efs')
                      done = False
                      while not done:
                          time.sleep(10)
                          response = efs.describe_mount_targets(**describe_parameters)
                          # test mount targets
                          logger.info("describe_mount_targets response = {0}".format(json.dumps(response)))
                          mount_targets = response.get("MountTargets",[{}])
                          done_count = 0
                          for mount_target in mount_targets:
                            life_cycle_state = mount_target.get("LifeCycleState")
                            logger.info("mount_target life_cycle_state = {0}".format(life_cycle_state))
                            if 'available' == life_cycle_state:
                              done_count += 1

                          # test file systems
                          response = efs.describe_file_systems(**describe_parameters)
                          logger.info(f"describe_file_systems response = {response}")
                          file_systems = response.get("FileSystems",[{}])
                          for file_system in file_systems:
                            life_cycle_state = file_system.get("LifeCycleState")
                            logger.info("file_system life_cycle_state = {0}".format(life_cycle_state))
                            if 'available' == life_cycle_state:
                              done_count += 1

                          logger.info(f"Done? count: {done_count} of {len(mount_targets) + len(file_systems)}")
                          if done_count == ( len(mount_targets) + len(file_systems) ):
                              done = True
                      logger.info("Done, mount targets and file systems available")
                      #hack, wait for a few minutes for EFS to actually be available
                      time.sleep(360)
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Waits until EFS MountTargets are available.
      FunctionName: !Sub "${AWS::StackName}-lambda-wait-for-efs"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-wait-for-efs"
      Timeout: 600
    Type: AWS::Lambda::Function

# -- Run Lambda jobs ----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html
# AWS Console: FIXME:  none?


  LambdaRunnerDbPassword:
    Properties:
      Length: 16
      ServiceToken: !GetAtt LambdaFunctionRandomString.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-db-password"
    Type: Custom::LambdaRunnerDbPassword


  LambdaRunnerInitEfs:
    DependsOn:
     - LambdaRunnerWaitForEfs
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-efs-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitEfs
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-efs"
    Type: Custom::LambdaRunnerInitEfs


  LambdaRunnerInstallSenzing:
    DependsOn:
     - LambdaRunnerInitEfs
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-install-senzing-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInstallSenzing
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-install-senzing"
    Type: Custom::LambdaRunnerInstallSenzing


  LambdaRunnerInitPostgresConfiguration:
    DependsOn:
     - LambdaRunnerInitPostgresCore
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-configuration-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresConfiguration
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-configuration"
    Type: Custom::LambdaRunnerInitPostgresConfiguration


  LambdaRunnerInitPostgresCore:
    DependsOn:
     - RdsDbClusterCore
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-core-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresCore
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-core"
    Type: Custom::LambdaRunnerInitPostgresCore


  LambdaRunnerInitPostgresLibfeat:
    DependsOn:
     - RdsDbClusterLibfeat
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-libfeat-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresLibfeat
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-libfeat"
    Type: Custom::LambdaRunnerInitPostgresLibfeat


  LambdaRunnerInitPostgresRes:
    DependsOn:
     - RdsDbClusterRes
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-res-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgresRes
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-postgres-res"
    Type: Custom::LambdaRunnerInitPostgresRes


  LambdaRunnerInitSenzing:
    DependsOn:
     - LambdaRunnerInstallSenzing
     - LambdaRunnerInitPostgresCore
     - LambdaRunnerInitPostgresLibfeat
     - LambdaRunnerInitPostgresRes
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: DISABLED
            securityGroups:
              - !Ref Ec2SecurityGroupLambdaRunner
            subnets:
              - !Ref Ec2SubnetPrivate1
              - !Ref Ec2SubnetPrivate2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-senzing-run-task-parameters"
        taskDefinition: !Ref EcsTaskDefinitionInitSenzing
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-init-senzing"
    Type: Custom::LambdaRunnerInitSenzing


  LambdaRunnerSetPostgresCoreTimeoutAction:
    Properties:
      DBClusterIdentifier: !Ref RdsDbClusterCore
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt LambdaFunctionSetRdbTimeoutAction.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-set-postgres-core-timeout-action"
    Type: Custom::LambdaRunnerSetPostgresCoreTimeoutAction


  LambdaRunnerSetPostgresLibfeatTimeoutAction:
    Properties:
      DBClusterIdentifier: !Ref RdsDbClusterLibfeat
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt LambdaFunctionSetRdbTimeoutAction.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-set-postgres-libfeat-timeout-action"
    Type: Custom::LambdaRunnerSetPostgresLibfeatTimeoutAction


  LambdaRunnerSetPostgresResTimeoutAction:
    Properties:
      DBClusterIdentifier: !Ref RdsDbClusterRes
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt LambdaFunctionSetRdbTimeoutAction.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-set-postgres-res-timeout-action"
    Type: Custom::LambdaRunnerSetPostgresResTimeoutAction


  LambdaRunnerStackNameAsLower:
    Properties:
      InputString: !Sub "${AWS::StackName}"
      ServiceToken: !GetAtt LambdaFunctionStringToLower.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-stack-name-as-lower"
    Type: Custom::LambdaRunnerStackNameAsLower



  LambdaRunnerWaitForEfs:
    Properties:
      ClusterId: !Ref EcsCluster
      DescribeParameters:
        # MountTargetId: !Ref EfsMountTarget1
        FileSystemId: !Ref EfsFileSystem
      ServiceToken: !GetAtt LambdaFunctionWaitForEfs.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-runner-wait-for-efs"
    Type: Custom::LambdaRunnerWaitForEfs


# -- EcsTaskDefinition --------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
# AWS Console: https://console.aws.amazon.com/ecs/home?#/taskDefinitions > Search for {stack}


  EcsTaskDefinitionInitEfs:
    Properties:
      ContainerDefinitions:
        -
          Command:
            - 'mkdir'
            - '/efs/g2'
            - '&&'
            - 'mkdir'
            - '-p'
            - '/efs/data/2.0.0'
            - '&&'
            - 'mkdir'
            - '/efs/etc'
            - '&&'
            - 'mkdir'
            - '-m'
            - '777'
            - '-p'
            - '/efs/var/shared'
          Essential: true
          Image: public.ecr.aws/senzing/busybox
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-efs-root
              ContainerPath: /efs
              ReadOnly: false
          Name: efsinitcontainer
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitEfs.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-efs"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-efs"
      Volumes:
        -
          Name: senzing-efs-root
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: '/'
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresConfiguration:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterCore.Endpoint.Address}:${RdsDbClusterCore.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /app/insert-senzing-configuration.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-configuration"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-configuration"
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresCore:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterCore.Endpoint.Address}:${RdsDbClusterCore.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-core"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-core"
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresLibfeat:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterLibfeat.Endpoint.Address}:${RdsDbClusterLibfeat.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-libfeat"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-libfeat"
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgresRes:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub
                - "postgresql://${DatabaseUsername}:${DatabasePassword}@${RdsDbClusterRes.Endpoint.Address}:${RdsDbClusterRes.Endpoint.Port}/${DatabaseName}"
                - DatabaseUsername: !FindInMap [Constants, Database, Username]
                  DatabasePassword: !GetAtt LambdaRunnerDbPassword.RandomString
                  DatabaseName: !FindInMap [Constants, Database, Name]
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: public.ecr.aws/senzing/postgresql-client:1.1.0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          Name: postgresinit
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitPostgres.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres-res"
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres-res"
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitSenzing:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_ENGINE_CONFIGURATION_JSON
              Value: !GetAtt SsmParameterSenzingEngineConfigurationJson.Value
            -
              Name: SENZING_G2CONFIG_GTC
              Value: |
                addDataSource CUSTOMER
                addDataSource WATCHLIST
                save
            -
              Name: SENZING_LICENSE_BASE64_ENCODED
              Value: !Sub "${SenzingLicenseAsBase64}"
          Essential: true
          Image: public.ecr.aws/senzing/init-container:1.6.9
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false
          Name: initcontainer
          Privileged: false
          ReadonlyRootFilesystem: false
          User: '0'
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInitSenzing.Arn
      Family: !Sub "${AWS::StackName}-task-definition-init-senzing"
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-efs"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/2.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInstallSenzing:
    Properties:
      ContainerDefinitions:
        -
          Command:
            - '-y'
            - 'install'
            - !FindInMap [Constants, Senzing, Version]
          Environment:
            -
              Name: SENZING_ACCEPT_EULA
              Value: !Ref AcceptEula
          Essential: true
          Image: public.ecr.aws/senzing/yum:1.1.4
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false

          Name: yum
          Privileged: false
          ReadonlyRootFilesystem: false
          User: '0'
      Cpu: '512'
      ExecutionRoleArn: !GetAtt IamRoleInstallSenzing.Arn
      Family: !Sub "${AWS::StackName}-task-definition-install-senzing"
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-install-senzing"
      Volumes:
        -
          Name: senzing-data-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /data
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

# AWS Console: https://console.aws.amazon.com/cloudformation/home?#/stacks > {stack} > Outputs

  AccountID:
    Description: 'The accountID Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#accountid'
    Export:
      Name: !Sub "${AWS::StackName}-account-id"
    Value: !Sub "${AWS::AccountId}"

  DatabaseHostCore:
    Description: 'The connection endpoint for the DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databasehostcore'
    Export:
      Name: !Sub "${AWS::StackName}-database-host-core"
    Value: !GetAtt RdsDbClusterCore.Endpoint.Address

  DatabaseHostLibfeat:
    Description: 'The connection endpoint for the DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databasehostlibfeat'
    Export:
      Name: !Sub "${AWS::StackName}-database-host-libfeat"
    Value: !GetAtt RdsDbClusterLibfeat.Endpoint.Address

  DatabaseHostRes:
    Description: 'The connection endpoint for the DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databasehostres'
    Export:
      Name: !Sub "${AWS::StackName}-database-host-res"
    Value: !GetAtt RdsDbClusterRes.Endpoint.Address

  DatabaseName:
    Description: 'The name of the database. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databasename'
    Export:
      Name: !Sub "${AWS::StackName}-database-name"
    Value: !FindInMap [Constants, Database, Name]

  DatabasePassword:
    Description: 'The randomly generated password for the database. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databasepassword'
    Export:
      Name: !Sub "${AWS::StackName}-database-password"
    Value: !GetAtt LambdaRunnerDbPassword.RandomString

  DatabasePortCore:
    Description: 'The port number that will accept connections on this DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databaseportcore'
    Export:
      Name: !Sub "${AWS::StackName}-database-port-core"
    Value: !GetAtt RdsDbClusterCore.Endpoint.Port

  DatabasePortLibfeat:
    Description: 'The port number that will accept connections on this DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databaseportlibfeat'
    Export:
      Name: !Sub "${AWS::StackName}-database-port-libfeat"
    Value: !GetAtt RdsDbClusterLibfeat.Endpoint.Port

  DatabasePortRes:
    Description: 'The port number that will accept connections on this DB cluster. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databaseportres'
    Export:
      Name: !Sub "${AWS::StackName}-database-port-res"
    Value: !GetAtt RdsDbClusterRes.Endpoint.Port

  DatabaseUsername:
    Description: 'The administrative user name. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#databaseusername'
    Export:
      Name: !Sub "${AWS::StackName}-database-username"
    Value: !FindInMap [Constants, Database, Username]

  Ec2InternetGateway:
    Description: 'Internet Gateway. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2internetgateway'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Value: !Ref Ec2InternetGateway

  Ec2SecurityGroupInternal:
    Description: 'The ID of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2securitygroupinternal'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-security-group-internal"
    Value: !Ref Ec2SecurityGroupInternal

  Ec2Vpc:
    Description: 'The ID of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2vpc'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"
    Value: !Ref Ec2Vpc

  Ec2VpcCidrBlock:
    Description: 'The CidrBloc of the VPC. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2vpccidrblock'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId-cidrblock"
    Value: !GetAtt Ec2Vpc.CidrBlock

  SenzingVersion:
    Description: 'The Senzing Engine version installed. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#senzingversion'
    Export:
      Name: !Sub "${AWS::StackName}-senzing-version"
    Value: !FindInMap [Constants, Senzing, Version]

  SubnetPrivate1:
    Description: 'The ID of private subnet 1. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetprivate1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-private-1"
    Value: !Ref Ec2SubnetPrivate1

  SubnetPrivate2:
    Description: 'The ID of private subnet 2. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetprivate2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-private-2"
    Value: !Ref Ec2SubnetPrivate2

  SubnetPublic1:
    Description: 'The ID of public subnet 1. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-1"
    Value: !Ref Ec2SubnetPublic1

  SubnetPublic2:
    Description: 'The ID of public subnet 2. Help: https://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-2"
    Value: !Ref Ec2SubnetPublic2

